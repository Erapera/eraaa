import gradio as gr
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

texts = [
    "–Ø –ª—é–±–ª—é —ç—Ç–æ—Ç —Ñ–∏–ª—å–º",
    "–≠—Ç–æ –ª—É—á—à–∏–π –¥–µ–Ω—å –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏",
    "–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ –∏ –ø–ª–æ—Ö–æ",
    "–£–∂–∞—Å–Ω—ã–π —Å–µ—Ä–≤–∏—Å, —è –Ω–µ–¥–æ–≤–æ–ª–µ–Ω",
    "–§–∏–ª—å–º –±—ã–ª —Å–∫—É—á–Ω—ã–π –∏ –¥–ª–∏–Ω–Ω—ã–π",
    "–ú–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
]
labels = [1, 1, 0, 0, 0, 1]

vectorizer = CountVectorizer()
X = vectorizer.fit_transform(texts)

model = MultinomialNB()
model.fit(X, labels)

def predict_sentiment(text):
    X_test = vectorizer.transform([text])
    pred = model.predict(X_test)[0]
    return "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π üòä" if pred == 1 else "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π üòû"

demo = gr.Interface(
    fn=predict_sentiment,
    inputs="text",
    outputs="text",
    title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ç–∑—ã–≤–æ–≤",
    description="–ü—Ä–æ—Å—Ç–∞—è ML-–º–æ–¥–µ–ª—å –Ω–∞ Gradio."
)

if __name__ == "__main__":
    demo.launch(server_name="0.0.0.0", server_port=10000)
